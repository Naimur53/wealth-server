generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  user
  admin
  superAdmin
}

enum EUserGender {
  male
  female
  transgender
  others
}

model User {
  id              String            @id @default(uuid())
  name            String
  email           String            @unique
  password        String
  phoneNumber     String
  dateOfBath      DateTime?
  location        String?
  gender          EUserGender?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  role            UserRole          @default(user)
  profileImg      String?           @default("/assets/demo-user.png")
  isVerified      Boolean           @default(false)
  isBlocked       Boolean?
  isChampion      Boolean           @default(false)
  status          EUserStatus       @default(pending)
  verificationOtp VerificationOtp[]
  propertryOrders Orders[]
  savedPropertry  SavedPropertry[]
  savedCrowdFund  SavedCrowdFund[]
  savedflipping   SavedFlipping[]
  feedback        Feedback[]
  messaage        Message[]
  seenMessage     SeenMessage?
  Flipping        Flipping[]
}

enum EUserStatus {
  pending
  approved
  denied
}

model VerificationOtp {
  id        String           @id @default(uuid())
  type      EVerificationOtp
  otp       Int
  createdAt DateTime         @default(now())
  ownById   String
  ownBy     User             @relation(fields: [ownById], references: [id])
}

enum EVerificationOtp {
  createUser
  forgotPassword
}

// for location and property
model Location {
  id        String      @id @default(uuid())
  name      String      @unique
  imgUrl    String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  property  Property[]
  crowdFund CrowdFund[]
}

// single currenct loctoin property start ---------------------------------------
model Property {
  id             String           @id @default(uuid())
  thumbnail      String
  title          String
  description    String
  rooms          Int?
  size           String
  floor          String?
  price          Float
  streetLocation String
  videoUrl       String
  images         String[]
  locationId     String
  createdAt      DateTime         @default(now())
  status         EPropertyStatus  @default(available)
  updatedAt      DateTime         @updatedAt
  type           EPropertyType
  location       Location         @relation(fields: [locationId], references: [id])
  propertyState  PropertyState[]
  order          Orders[]
  savedPropertry SavedPropertry[]
}

enum EPropertyStatus {
  sold
  available
  pending
  denied
}

enum EPropertyType {
  land
  semiDetachedHouse
  detachedHouse
  finished
  unFinished
}

model PropertyState {
  id         String   @id @default(uuid())
  time       DateTime
  price      Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  propertyId String
  property   Property @relation(fields: [propertyId], references: [id])
}

model SavedPropertry {
  id         String    @id @unique @default(uuid())
  ownById    String
  ownBy      User      @relation(fields: [ownById], references: [id])
  propertyId String
  property   Property  @relation(fields: [propertyId], references: [id])
  flipping   Flipping? @relation(fields: [flippingId], references: [id])
  flippingId String?
}

model Orders {
  id                String            @id @unique @default(uuid())
  isPaid            Boolean           @default(false)
  amount            Float
  propertyId        String?
  property          Property?         @relation(fields: [propertyId], references: [id])
  crowdFundId       String?
  crowdFund         CrowdFund?        @relation(fields: [crowdFundId], references: [id])
  flippingId        String?
  flipping          Flipping?         @relation(fields: [flippingId], references: [id])
  refName           EOrderRefName
  bankName          String?
  bankAccountNumber String?
  paymentReceiptUrl String?
  paystackId        String?
  paystackUrl       String?
  wealthBankId      String?
  wealthBank        Bank?             @relation(fields: [wealthBankId], references: [id])
  orderById         String
  orderBy           User              @relation(fields: [orderById], references: [id])
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  status            EOrderStatus      @default(pending)
  paymentType       EOrderPaymentType
}

enum EOrderStatus {
  pending
  success
  denied
}

enum EOrderRefName {
  crowdFund
  flipping
  property
}

enum EOrderPaymentType {
  paystack
  manual
}

// single currenct loctoin property End---------------------------------------

// Bank
model Bank {
  id              String    @id @unique @default(uuid())
  name            String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  typeOfBank      EBankType
  logoOfBank      String
  propertryOrders Orders[]
}

enum EBankType {
  usd
  naira
}

//  single crowd funding start ----------------------------------------

model CrowdFund {
  id             String           @id @default(uuid())
  thumbnail      String
  title          String
  description    String
  rooms          Int?
  size           String
  floor          String?
  targetFund     Float
  fundRaised     Float            @default(0)
  streetLocation String
  videoUrl       String
  type           EPropertyType
  images         String[]
  locationId     String
  status         EPropertyStatus  @default(available)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  location       Location         @relation(fields: [locationId], references: [id])
  savedCrowdFund SavedCrowdFund[]
  Orders         Orders[]
}

model SavedCrowdFund {
  id          String    @id @unique @default(uuid())
  ownById     String
  ownBy       User      @relation(fields: [ownById], references: [id])
  crowdFundId String
  crowdFund   CrowdFund @relation(fields: [crowdFundId], references: [id])
}

// ------------------------------------ crowd fund end 

// flipping area 
model Flipping {
  id               String           @id @default(uuid())
  thumbnail        String
  title            String
  description      String
  rooms            Int?
  size             String
  floor            String?
  price            Float
  streetLocation   String
  videoUrl         String
  images           String[]
  type             EPropertyType
  status           EPropertyStatus  @default(pending)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  ownById          String
  ownBy            User             @relation(fields: [ownById], references: [id])
  location         String
  emergencyContact String?
  emergencyEmail   String?
  savedFlipping    SavedFlipping[]
  savedPropertry   SavedPropertry[]
  Orders           Orders[]
}

model SavedFlipping {
  id         String   @id @unique @default(uuid())
  ownById    String
  ownBy      User     @relation(fields: [ownById], references: [id])
  flippingId String
  flipping   Flipping @relation(fields: [flippingId], references: [id])
}

// feed back 
model Feedback {
  id          String   @id @unique @default(uuid())
  createdAt   DateTime @default(now())
  rating      Int
  description String
  ownById     String
  ownBy       User     @relation(fields: [ownById], references: [id])
}

//  chat group 

model ChatGroup {
  id          String         @id @unique @default(uuid())
  thumbnail   String
  name        String
  type        EChatGroupType
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  messaage    Message[]
  SeenMessage SeenMessage[]
}

enum EChatGroupType {
  public
  admin
  champion
}

// single message 

model Message {
  id          String    @id @unique @default(uuid())
  chatGroupId String
  chatGroup   ChatGroup @relation(fields: [chatGroupId], references: [id])

  text      String?
  image     String?
  sendById  String
  sendBy    User     @relation(fields: [sendById], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SeenMessage {
  id        String    @id @unique @default(uuid())
  groupId   String
  chatGroup ChatGroup @relation(fields: [groupId], references: [id])
  seenById  String    @unique
  seenBy    User      @relation(fields: [seenById], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  lastSeen  DateTime
}
