generator client {
  provider = "prisma-client-js"
}
 
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  user
  admin
  superAdmin
}

enum EUserGender {
  male
  female
  transgender
  others
}

model User {
  id              String            @id @default(uuid())
  name            String
  email           String            @unique
  password        String
  phoneNumber     String
  dateOfBath      DateTime?
  location        String?
  gender          EUserGender?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  role            UserRole          @default(user)
  profileImg      String?           @default("/assets/demo-user.png")
  isVerified      Boolean           @default(false)
  isBlocked       Boolean?
  status          EUserStatus       @default(pending)
  verificationOtp VerificationOtp[]
  propertryOrders PropertryOrders[]
  savedPropertry  SavedPropertry[]
  savedCrowdFund  SavedCrowdFund[]
  crowdFundOrders CrowdFundOrders[]
  savedflipping    SavedFlipping[]
  flippingOrders   FlippingOrders[]
  feedback        Feedback[]
  messaage        Messaage[]
  seenMessage     SeenMessage?
}

enum EUserStatus {
  pending
  approved
  denied
}

model VerificationOtp {
  id        String           @id @default(uuid())
  type      EVerificationOtp
  otp       Int
  createdAt DateTime         @default(now())
  ownById   String
  ownBy     User             @relation(fields: [ownById], references: [id])
}

enum EVerificationOtp {
  createUser
  forgotPassword
}

// for location and property
model Location {
  id        String     @id @default(uuid())
  name      String     @unique
  imgUrl    String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  property  Property[]
  crowdFund  CrowdFund[]
  flipping   Flipping[]
}

// single currenct loctoin property start ---------------------------------------
model Property {
  id               String           @id @default(uuid())
  thumbnail        String
  title            String
  description      String
  rooms            Int?
  size             String
  floor            String? 
  price            Float
  streetLocation   String
  videoUrl         String
  images           String[]
  locationId       String
  createdAt DateTime   @default(now())
  status  EPropertyStatus @default(available)
  updatedAt DateTime   @updatedAt
  type             EPropertyType
  location         Location         @relation(fields: [locationId], references: [id])
  propertyState    PropertyState[]
  order             PropertryOrders?
  savedPropertry   SavedPropertry[]
}

enum EPropertyStatus {
  sold
  available
  pending
  denied
}

enum EPropertyType {
  land
  semiDetachedHouse
  detachedHouse
  finished
  unFinished
}

model PropertyState {
  id         String   @id @default(uuid())
  time       DateTime
  price      Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  propertyId String
  property   Property @relation(fields: [propertyId], references: [id])
}

model SavedPropertry {
  id         String   @id @unique @default(uuid())
  ownById    String
  ownBy      User     @relation(fields: [ownById], references: [id])
  propertyId String
  property   Property @relation(fields: [propertyId], references: [id])
  flipping    Flipping? @relation(fields: [flippingId], references: [id])
  flippingId  String?
}

model PropertryOrders {
  id                String       @id @unique @default(uuid())
  propertyId        String       @unique
  property          Property     @relation(fields: [propertyId], references: [id])
  bankName          String?
  bankAccountNumber String?
  paymentReceiptUrl String?
  paystackId        String?
  wealthBankId      String?
  wealthBank        Bank?        @relation(fields: [wealthBankId], references: [id])
  orderById         String
  orderBy           User         @relation(fields: [orderById], references: [id])
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  status            EOrderStatus @default(pending)
  paymentType       EPaymentType
}

enum EOrderStatus {
  pending
  success
  denied
}

enum EPaymentType {
  paystack
  manual
}

// single currenct loctoin property End---------------------------------------

// Bank
model Bank {
  id              String            @id @unique @default(uuid())
  name            String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  typeOfBank      EBankType
  logoOfBank      String
  propertryOrders PropertryOrders[]
  crowdFundOrders CrowdFundOrders[]
  flippingOrders   FlippingOrders[]
}

enum EBankType {
  usd
  naira
}

//  single crowd funding start ----------------------------------------

model CrowdFund {
  id              String            @id @default(uuid())
  thumbnail       String
  title           String
  description     String
  rooms           Int?
  size            String
  floor           String?
  targetFund      Float
  fundRaised      Float             @default(0)
  streetLocation  String
  videoUrl        String
  type            EPropertyType
  images          String[]
  locationId      String
  status          EPropertyStatus @default(available)
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
   location         Location         @relation(fields: [locationId], references: [id])
  savedCrowdFund  SavedCrowdFund[]
  crowdFundOrders CrowdFundOrders[]
}

model SavedCrowdFund {
  id          String    @id @unique @default(uuid())
  ownById     String
  ownBy       User      @relation(fields: [ownById], references: [id])
  crowdFundId String
  crowdFund   CrowdFund @relation(fields: [crowdFundId], references: [id])
}

model CrowdFundOrders {
  id                String       @id @unique @default(uuid())
  crowdFundId       String
  crowdFund         CrowdFund    @relation(fields: [crowdFundId], references: [id])
  bankName          String?
  bankAccountNumber String?
  paymentReceiptUrl String?
  paystackId        String?
  wealthBankId      String?
  wealthBank        Bank?        @relation(fields: [wealthBankId], references: [id])
  orderById         String
  orderBy           User         @relation(fields: [orderById], references: [id])
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  status            EOrderStatus @default(pending)
  paymentType       EPaymentType
}

// ------------------------------------ crowd fund end 

// flipping area 
model Flipping {
  id             String           @id @default(uuid())
  thumbnail      String
  title          String
  description    String
  rooms          Int?
  size           String
  floor          String?
  price          Float
  streetLocation String
  videoUrl       String
  images         String[]
  type           EPropertyType
    status          EPropertyStatus @default(pending)
     createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  locationId     String
  location       Location         @relation(fields: [locationId], references: [id])
  savedFlipping   SavedFlipping[]
  flippingOrders  FlippingOrders?
  savedPropertry SavedPropertry[]
}

model SavedFlipping {
  id        String  @id @unique @default(uuid())
  ownById   String
  ownBy     User    @relation(fields: [ownById], references: [id])
  flippingId String
  flipping   Flipping @relation(fields: [flippingId], references: [id])
}

model FlippingOrders {
  id                String       @id @unique @default(uuid())
  flippingId         String       @unique
  flipping           Flipping      @relation(fields: [flippingId], references: [id])
  bankName          String?
  bankAccountNumber String?
  paymentReceiptUrl String?
  paystackId        String?
  wealthBankId      String?
  wealthBank        Bank?        @relation(fields: [wealthBankId], references: [id])
  orderById         String
  orderBy           User         @relation(fields: [orderById], references: [id])
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  status            EOrderStatus @default(pending)
  paymentType       EPaymentType
}

// feed back 
model Feedback {
  id        String   @id @unique @default(uuid())
  createdAt DateTime @default(now())
  rating    Int
  ownById   String
  ownBy     User     @relation(fields: [ownById], references: [id])
}

//  chat group 

model ChatGroup {
  id        String         @id @unique @default(uuid())
  thumbnail String
  name      String
  type      EChatGroupType
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  messaage  Messaage[]
}

enum EChatGroupType {
  public
  private
}

// single message 

model Messaage {
  id          String    @id @unique @default(uuid())
  chatGroupId String
  chatGroup   ChatGroup @relation(fields: [chatGroupId], references: [id])

  text        String?
  image       String?
  sendById    String
  sendBy      User          @relation(fields: [sendById], references: [id])
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  seenMessage SeenMessage[]
}

model SeenMessage {
  id        String   @id @unique @default(uuid())
  messageId String
  message   Messaage @relation(fields: [messageId], references: [id])
  seenById  String   @unique
  seenBy    User     @relation(fields: [seenById], references: [id])
  createdAt DateTime @default(now())
}
