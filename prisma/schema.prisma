generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  user
  admin
  superAdmin
}

model User {
  id              String            @id @default(uuid())
  name            String
  email           String            @unique
  password        String
  phoneNumber     String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  role            UserRole          @default(user)
  profileImg      String?           @default("/assets/demo-user.png")
  isVerified      Boolean           @default(false)
  isBlocked       Boolean?
  status          EUserStatus       @default(pending)
  VerificationOtp VerificationOtp[]
  propertryOrders PropertryOrders[]
  SavedPropertry  SavedPropertry[]
  SavedCrowdFund  SavedCrowdFund[]
  CrowdFundOrders CrowdFundOrders[]
}

enum EUserStatus {
  pending
  approved
  denied
}

model VerificationOtp {
  id        String           @id @default(uuid())
  type      EVerificationOtp
  otp       Int
  createdAt DateTime         @default(now())
  ownById   String
  ownBy     User             @relation(fields: [ownById], references: [id])
}

enum EVerificationOtp {
  createUser
  forgotPassword
}

// for location and property
model Location {
  id        String     @id @default(uuid())
  name      String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  property  Property[]
}

// single currenct loctoin property start ---------------------------------------
model Property {
  id               String           @id @default(uuid())
  thumbnail        String
  title            String
  description      String
  rooms            Int?
  size             String
  floor            String?
  annualisedReturn Float
  price            Float
  streetLocation   String
  videoUrl         String
  images           String[]
  locationId       String
  type             EPropertyType
  location         Location         @relation(fields: [locationId], references: [id])
  propertyState    PropertyState[]
  orders           PropertryOrders?
  SavedPropertry   SavedPropertry[]
}

enum EPropertySoldStatus {
  sold
  available
}

enum EPropertyType {
  land
  semiDetachedHouse
  detachedHouse
  finished
  unFinished
}

model PropertyState {
  id         String   @id @default(uuid())
  time       DateTime
  price      Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  propertyId String
  property   Property @relation(fields: [propertyId], references: [id])
}

model SavedPropertry {
  id         String   @id @unique @default(uuid())
  ownById    String
  ownBy      User     @relation(fields: [ownById], references: [id])
  propertyId String
  property   Property @relation(fields: [propertyId], references: [id])
}

model PropertryOrders {
  id                String       @id @unique @default(uuid())
  propertyId        String       @unique
  property          Property     @relation(fields: [propertyId], references: [id])
  bankName          String?
  bankAccountNumber String?
  paymentReceiptUrl String?
  paystackId        String?
  wealthBankId      String?
  wealthBank        Bank?        @relation(fields: [wealthBankId], references: [id])
  orderById         String
  orderBy           User         @relation(fields: [orderById], references: [id])
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  status            EOrderStatus @default(pending)
  paymentType       EPaymentType
}

enum EOrderStatus {
  pending
  success
  denied
}

enum EPaymentType {
  paystack
  manual
}

// single currenct loctoin property End---------------------------------------

// Bank
model Bank {
  id              String            @id @unique @default(uuid())
  name            String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  typeOfBank      EBankType
  logoOfBank      String
  propertryOrders PropertryOrders[]
  CrowdFundOrders CrowdFundOrders[]
}

enum EBankType {
  usd
  naira
}

//  single crowd funding start ----------------------------------------

model CrowdFund {
  id              String            @id @default(uuid())
  thumbnail       String
  title           String
  description     String
  rooms           String
  size            String
  floor           String
  tragetFund      Float
  fundRaised      Float             @default(0)
  streetLocation  String
  videoUrl        String
  images          String[]
  locationId      String
  SavedCrowdFund  SavedCrowdFund[]
  CrowdFundOrders CrowdFundOrders[]
}

model SavedCrowdFund {
  id          String    @id @unique @default(uuid())
  ownById     String
  ownBy       User      @relation(fields: [ownById], references: [id])
  crowdFundId String
  crowdFund   CrowdFund @relation(fields: [crowdFundId], references: [id])
}

model CrowdFundOrders {
  id                String       @id @unique @default(uuid())
  crowdFundId       String
  crowdFund         CrowdFund    @relation(fields: [crowdFundId], references: [id])
  bankName          String?
  bankAccountNumber String?
  paymentReceiptUrl String?
  paystackId        String?
  wealthBankId      String?
  wealthBank        Bank?        @relation(fields: [wealthBankId], references: [id])
  orderById         String
  orderBy           User         @relation(fields: [orderById], references: [id])
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  status            EOrderStatus @default(pending)
  paymentType       EPaymentType
}
