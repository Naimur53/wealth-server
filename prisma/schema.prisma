generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  user
  admin
  seller
  superAdmin
}

model User {
  id                  String              @id @default(uuid())
  name                String
  email               String              @unique
  password            String
  phoneNumber         String?
  shouldSendEmail     Boolean             @default(true)
  txId                String?
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  role                UserRole            @default(user)
  profileImg          String?             @default("/assets/demo-user.png")
  isVerified          Boolean             @default(false)
  isApprovedForSeller Boolean             @default(false)
  isBlocked           Boolean?
  isPaidForSeller           Boolean?
  Account             Account[]
  Orders              Orders[]
  Cart                Cart[]
  Currency            Currency?
  CurrencyRequest     CurrencyRequest[]
  WithdrawalRequest   WithdrawalRequest[]
}

enum accountCategory {
  Facebook
  Twitter
  Instagram
  LinkedIn
  Pinterest
  Snapchat
  TikTok
  YouTube
  GoogleVoice
  Threads
  Telegram
  Whatsapp
  Playstation
  CallOfDuty
  Pubg
  Steam
  Gmail
  Ymail
  Hotmail
  MailRu
  Outlook
  Windscribe
  Nord
  Vpn911
  Other
  Netflix
Apple
TrustWallet
AmazonPrimeVideos
}

enum accountType {
  SocialMedia
  Game
  Email
  Vpn
  Other
}

enum EApprovedForSale {
  pending
  approved
  denied
}

model Account {
  id              String           @id @unique @default(uuid())
  name            String
  description     String
  price           Int
  username        String
  password        String
  preview         String?
  additionalEmail         String?
  additionalPassword         String?
  additionalDescription         String?
  category        accountCategory
  accountType     accountType      @default(SocialMedia)
  approvedForSale EApprovedForSale @default(pending)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  ownById         String
  isSold          Boolean          @default(false)
  ownBy           User             @relation(fields: [ownById], references: [id])
  Cart            Cart[]
  Orders          Orders?
}

model Orders {
  id        String   @id @unique @default(uuid())
  accountId String   @unique
  account   Account  @relation(fields: [accountId], references: [id])
  orderById String
  orderBy   User     @relation(fields: [orderById], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id        String   @id @unique @default(uuid())
  accountId String
  account   Account  @relation(fields: [accountId], references: [id])
  ownById   String
  ownBy     User     @relation(fields: [ownById], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Currency {
  id        String   @id @unique @default(uuid())
  amount    Float    @default(0)
  ownById   String   @unique
  ownBy     User     @relation(fields: [ownById], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CurrencyRequest {
  id        String                   @id @unique @default(uuid())
  message   String
  amount    Float
  ownById   String
  status    EStatusOfCurrencyRequest @default(pending)
  paymentStatus String                @default("waiting")
  ownBy     User                     @relation(fields: [ownById], references: [id])
  createdAt DateTime                 @default(now())
  updatedAt DateTime                 @updatedAt
}

enum EStatusOfCurrencyRequest {
  pending
  approved
  denied
}

enum EStatusOfWithdrawalRequest {
  pending
  approved
  denied
}

model WithdrawalRequest {
  id        String                     @id @unique @default(uuid())
  message   String?
  amount    Float
  ownById   String
  status    EStatusOfWithdrawalRequest @default(pending)
  fullName  String?
  accountNumber String?
  bankName      String?
  walletAddress String?
  isTrc         Boolean?
  ownBy     User                       @relation(fields: [ownById], references: [id])
  createdAt DateTime                   @default(now())
  updatedAt DateTime                   @updatedAt
}
